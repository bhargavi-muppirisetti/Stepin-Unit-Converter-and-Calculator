# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          - name: Publish Unit Test Results
  # You may pin to the exact commit or the version.
  # uses: EnricoMi/publish-unit-test-result-action@95a3aff882d4abe2838b187c66477be7fbf3ddb8
  uses: EnricoMi/publish-unit-test-result-action@v1.19
  with:
    # GitHub API Access Token
    github_token: # default is ${{ github.token }}
    # Requests to the GitHub API are retried this number of times. The value must be a positive integer or zero.
    github_retries: # optional, default is 10
    # Commit SHA to which test results are published. Only needed if the value of GITHUB_SHA does not work for you.
    commit: # optional
    # Name of the created check run
    check_name: # optional, default is Unit Test Results
    # Title of PR comments, defaults to value of check_name input
    comment_title: # optional
    # The created test result check run has failure state if any test fails or test errors occur. Never fails when set to "nothing", fails only on errors when set to "errors". Default is "test failures".
    fail_on: # optional, default is test failures
    # File patterns of test result files. Supports *, **, ?, and []. Use multiline string for multiple patterns.
    files: 
    # Individual runs of the same test may see different failures. Reports all individual failures when set "true" or the first only otherwise
    report_individual_runs: # optional
    # De-duplicates classes with same name by their file name when set "true", combines test results for those classes otherwise
    deduplicate_classes_by_file_name: # optional
    # Configures which earlier comments of the action to hide: off - no comments, orphaned commits - comments for commits that are removed from the branch, all but latest - all comments but the latest
    hide_comments: # optional, default is all but latest
    # Deprecated, please use comment_mode instead!
    comment_on_pr: # optional
    # Control PR comments: off - disable PR comments, create new - create comments on PRs, each time a new one, update last - create comment on PR, reuse an existing one
    comment_mode: # optional, default is update last
    # Test results are compared to results of earlier commits to highlight changes: false - disable comparison, true - compare across commits
    compare_to_earlier_commit: # optional, default is true
    # Pull request events build a merge of the branch and the target branch, not just the commit that has been pushed. When your workflow deviates from this behaviour and builds the actual commit, then set this option to "commit". Defaults to "merge".
    pull_request_build: # optional, default is merge
    # Limits the number of removed or skipped tests listed on PR comments. This can be disabled with a value of 0. The default is 10.
    test_changes_limit: # optional
    # Adds additional information to the check run (comma-separated list): all tests - list all found tests, skipped tests - list all skipped tests, none - no extra annotations at all
    check_run_annotations: # optional, default is all tests, skipped tests
    # Adds check run annotations only on given branches. If not given, this defaults to the default branch of your repository, e.g. main or master. Comma separated list of branch names allowed, asterisk "*" matches all branches.
    check_run_annotations_branch: # optional
    # Sets the number of seconds the action waits between concurrent read requests to the GitHub API. This throttles the API usage to avoid abuse rate limits: https://docs.github.com/en/rest/overview/resources-in-the-rest-api#abuse-rate-limits
    seconds_between_github_reads: # optional, default is 0.25
    # Sets the number of seconds the action waits between concurrent write requests to the GitHub API. This throttles the API usage to avoid abuse rate limits: https://docs.github.com/en/rest/overview/resources-in-the-rest-api#abuse-rate-limits
    seconds_between_github_writes: # optional, default is 2.0
